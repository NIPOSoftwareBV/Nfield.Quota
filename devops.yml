trigger:
  batch: false
  branches:
    include: ['master', '*/ci-*']

pr: none

jobs:
- job: BuildProject
  displayName: Build project
  pool:
    vmImage: windows-2019      # Name: 'Hosted Windows 2019 with VS 2019'
  variables:
  - group: Nfield-Variables
  steps:
    
  # Build projects
  - task: DotNetCoreCLI@2
    displayName: 'Dotnet Build Quota'
    inputs:
      projects: 'Nfield.Quota.sln'
      arguments: '--configuration $(BuildConfiguration)'
  
  # Run tests
  - task: VSTest@2
    displayName: 'VsTest - testAssemblies'
    inputs:
      testAssemblyVer2: |
        **\$(BuildConfiguration)\net*\*.Tests.dll
        !**\obj\**
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'

  # Publish build artifacts
  - task: PublishSymbols@2
    displayName: 'Publish symbols path'
    inputs:
      SearchPattern: '**\bin\**\*.pdb'
      PublishSymbols: false
    continueOnError: true

  # Copy filds to artifacts directory
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**\bin\$(BuildConfiguration)\**'
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
  
  # Create NuGet Version    
  - task: PowerShell@1
    displayName: 'Create NuGet Version'
    inputs:
      scriptName: createnugetversion.ps1
 
  # Create NuGet Package  
  - task: DotNetCoreCLI@2
    displayName: '(when not pull): dotnet pack'
    inputs:
      command: pack
      packagesToPack: Nfield.Quota.sln
      nobuild: true
      versioningScheme: byEnvVar
      versionEnvVar: Version
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  # Publish NuGet package
  - task: NuGetCommand@2
    displayName: '(when not pull): NuGet push'
    inputs:
      command: push
      nuGetFeedType: external
      publishFeedCredentials: 'NuGet (Publish)'
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  # Publish release
  - task: PowerShell@2
    displayName: 'Publish Github release (if needed)'
    inputs:
      targetType: filePath
      filePath: './publish-release.ps1'
      arguments: '-AccessToken $(GitAccessToken)'
      errorActionPreference: continue
    continueOnError: true
